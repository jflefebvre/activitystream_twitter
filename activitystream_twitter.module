<?php
// $Id: activitystream_twitter.module,v 1.2.2.10 2010/11/28 06:34:27 akalsey Exp $

/**
 * @author: Jean-François Lefebvre (lefebvre.jf@gmail.com)
 * @file
 * The module for importing twitter activity.
 */

include 'tmhOAuth.php';

function activitystream_twitter_permalink($tweet) {
  return html_entity_decode('https://twitter.com/' . $tweet['user']['screen_name'] . '/status/' . $tweet['id_str']);
}

function activitystream_twitter_feed($user) {
  // No feed URL, skip this one
  if (!$user->feed) {
    return;
  }

  $consummer_key = variable_get('activitystream_twitter_consummer_key', '');
  $consummer_secret = variable_get('activitystream_twitter_consummer_secret', '');
  $consummer_user_token = variable_get('activitystream_twitter_user_token', '');
  $consummer_user_secret = variable_get('activitystream_twitter_user_secret', '');

  if (empty($consummer_key) || empty($consummer_secret) || empty($consummer_user_token) || empty($consummer_secret)) {
    watchdog('activitystream_twitter', 'Twitter API settings are missing.', array());   
    return;
  }

  $twitterOAuthSettings = array(
        'consumer_key'    => $consummer_key,
        'consumer_secret' => $consummer_secret,
        'user_token'      => $consummer_user_token,
        'user_secret'     => $consummer_user_secret
  );

  $tmhOAuth = new \tmhOAuth($twitterOAuthSettings);

  $url = $tmhOAuth->url($user->feed);
  
  $code = $tmhOAuth->request( 'GET', $url, array(
      'screen_name' => $user->userid,
      'include_rts' => true,
      'count' => 200
    ));

  if ( $code == 200 ) {
    $tweets = json_decode($tmhOAuth->response['response'], true);
  }

  $tweets = array();

  $items = array();
  if (is_array($tweets)) {
    foreach ($tweets as $tweet) {
      $permalink = activitystream_twitter_permalink($tweet);
      $activity['link'] = $permalink;
      $activity['title'] = $tweet['text']; 
      $activity['body'] = $tweet['text'];
      $activity['timestamp'] = strtotime($tweet['created_at']);
      $activity['guid'] = md5($permalink);
      $activity['id'] = md5($tweet['id']);
      $activity['data'] = serialize(array('favicon' => '', 'feedtitle' => 'Jean-François Lefebvre Tweets'));
      $activity['location'] = array('latitude' => 0, 'longitude' => 0);
      
      /*
      if (module_exists('taxonomy') && variable_get('activitystream_vocabulary', -1) > 0) {
        $categories = $item->get_categories();
        if ($categories) {
          foreach ($categories as $category) {
            $activity['categories'] = explode(' ', $category->term);
          }
        }
      }
      */

      $items[] = $activity;
    }
  }
  
  return $items;
}

/*
 * The API passes in a $user object that contains four properties:
 * uid, userid, password, feed. These properties contain the account
 * information entered into the user's settings page, along with the 
 * uid of their Drupal account.
 */
function activitystream_twitter_streamapi($user) {
  // This user doesn't have a twitter ID entered
  if (!$user->userid) {
    return;
  }
  
  $user->feed = '1.1/statuses/user_timeline.json';
  $activity = activitystream_twitter_feed($user);

  return $activity;
}

/*
 * Implement a user settings form hook. Modules should build a form
 * using an array that mirrors the Drupal form API. activitystream.module
 * will add the form elements to a tab called Activity Streams on the
 * user's Profile Edit page. Fields should be named
 * yourmodulename_fieldname. For instance, to store the user ID for 
 * Flickr, the field name is activitystream_flickr_userid
 *
 * To avoid collisions with other activitystream module's forms
 * use your module's name as the form array's key.
 *
 * @param $edit
 *   The values of the form fields, used for setting defaults
 * 
 */

function activitystream_twitter_activitystream_settings(&$edit) {
  $form['activitystream_twitter'] = array(
      '#type' => 'fieldset',
      '#title' => t('Twitter settings'));
  $form['activitystream_twitter']['activitystream_twitter_userid'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => empty($edit['activitystream_twitter_userid']) ? '' : $edit['activitystream_twitter_userid'],
    '#description' => t('The username for your Twitter account'));

  return $form;  
}

function activitystream_twitter_activitystream_admin() {
  $form['activitystream_twitter'] = array(
    '#type' => 'fieldset',
    '#title' => t("Twitter settings"),
    '#weight' => 1,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE
  );

  $form['activitystream_twitter']['activitystream_twitter_mentions'] = array(
    '#type' => 'radios',
    '#title' => t("Show replies?"),
    '#description' => t('Should tweets that begin with @ be displayed in the stream?'),
    '#options' => array('No','Yes'),
    '#default_value' => variable_get('activitystream_twitter_mentions', '1'),
    '#required' => FALSE
  );

  $form['activitystream_twitter']['activitystream_twitter_consummer_key'] = array(
    '#type' => 'textfield',
    '#title' => t("Consummer key"),
    '#default_value' => variable_get('activitystream_twitter_consummer_key', ''),
    '#description' => t('The Twitter API consummer key')
  );
  $form['activitystream_twitter']['activitystream_twitter_consummer_secret'] = array(
    '#type' => 'textfield',
    '#title' => t("Consummer secret"),
    '#default_value' => variable_get('activitystream_twitter_consummer_secret', ''),
    '#description' => t('The Twitter API consummer secret')
  );
  $form['activitystream_twitter']['activitystream_twitter_user_token'] = array(
    '#type' => 'textfield',
    '#title' => t("User token"),
    '#default_value' => variable_get('activitystream_twitter_user_token', ''),
    '#description' => t('The Twitter API user token')
  );
  $form['activitystream_twitter']['activitystream_twitter_user_secret'] = array(
    '#type' => 'textfield',
    '#title' => t("User secret"),
    '#default_value' => variable_get('activitystream_twitter_user_secret', ''),
    '#description' => t('The Twitter API user secret')
  );

  return $form;
}


function theme_activitystream_twitter_icon() {
  return theme_image(drupal_get_path('module', 'activitystream_twitter') .'/twitter.png', 'Twitter');
}

function theme_activitystream_twitter_item($activity) {
  $node = node_load($activity->nid);
  $date = theme('activitystream_date', $node->created);
  $user = user_load(array('uid' => $node->uid));
  $linked = activitystream_twitter_makelinks($node->title);
  $title = $linked[0];
  // Add twitpic thmbs to the text
  if ($linked[1] != '') {
    $pics .= '<br/>'. $linked[1];
  }
  $name = theme('activitystream_username', $user);
   return '<span class="activitystream-item">'. theme('activitystream_twitter_icon') ." <span>$name ". l(t('tweeted'), $activity->link) ." \"". $title ."\" <span class=\"activitystream-created\">$date</span></span> ". l('#', 'node/'. $node->nid, array('class' => 'permalink')) . $pics .'</span>';
}

function activitystream_twitter_makelinks($text) {
  // twitpic images
  preg_match_all("/http:\/\/twitpic\.com\/(.*)/i", $text, $matches, PREG_PATTERN_ORDER);
  foreach ($matches[1] as $match) {
    if (!empty($match[1])) {
      $pics .= '<a href="http://twitpic.com/'. $match .'"><img src="http://twitpic.com/show/mini/'. $match .'.jpg" /></a> ';      
    }
  }
  // autolink URLS
  $text = eregi_replace('(((f|ht){1}tp://)[-a-zA-Z0-9@:%_\+.~#?&//=]+)', '<a href="\\1">\\1</a>', $text);
  $text = eregi_replace('([[:space:]()[{}])(www.[-a-zA-Z0-9@:%_\+.~#?&//=]+)', '\\1<a href="http://\\2">\\2</a>', $text);
  // @ tags for users
  $text = preg_replace('/\b@(\w*)\b/', '<a href="http://twitter.com/\\1">@\\1</a>', $text);
  // hashtags to search.twitter
  $text = preg_replace('/\b#(\w*)\b/', '<a href="http://search.twitter.com/search?q=%23\\1">#\\1</a>', $text);
  return array($text, $pics);
}

function activitystream_twitter_theme() {
  return array(
    'activitystream_twitter_icon' => array(
      'arguments' => array(),
    ),
    'activitystream_twitter_item' => array(
      'arguments' => array('activity' => NULL),
    ),
  );
}
